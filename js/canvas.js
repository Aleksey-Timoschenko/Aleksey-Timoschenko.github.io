/*
    tilesetImage.src = 'assets/images/canvas/finalLand2_0.png';
    mainHero.src = 'assets/images/canvas/persons.png';
*/
window.onload = function () {

    const ground = [
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14]
    ];

    const layer1 = [
        [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22],
        [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22],
        [35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 44, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 43, 57, 64, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 56, 50, 64, 56, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 45, 46, 46, 47, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63, 63, 63, 63, 63, 63],
        [64, 64, 64, 64, 64, 64, 56, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 45, 46, 46, 47, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 45, 46, 45, 46, 46, 47, 46, 47, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 64, 64, 64, 45, 46, 46, 46, 46, 46, 46, 47, 64, 64, 64, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
        [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 64, 64, 64, 45, 46, 46, 46, 46, 46, 46, 47, 64, 64, 64, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19],
        [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 64, 64, 64, 45, 46, 46, 46, 46, 46, 46, 47, 64, 64, 64, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19],
        [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 64, 64, 64, 58, 59, 59, 59, 59, 59, 59, 60, 64, 64, 64, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19],
        [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 64, 63, 63, 63, 63, 64, 64, 64, 64, 63, 63, 63, 63, 64, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 5, 6, 6, 7, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 19, 19, 20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 19, 19, 20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 19, 19, 20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 19, 19, 20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 64, 43, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 19, 19, 20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 64, 56, 64, 64, 64, 64, 64, 64, 64],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 18, 19, 19, 20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 19, 19, 20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 64, 64, 44, 64, 64, 64, 64, 64],
        [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 19, 19, 20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 64, 64, 57, 64, 64, 64, 64, 64]
    ];

    const layer2 = [
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 64, 64, 64, 64, 64, 43, 64, 64, 64, 64, 64, 64, 43, 64, 64, 64, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 44, 50, 64, 64, 64, 56, 64, 64, 64, 64, 64, 64, 56, 43, 64, 44, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 57, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 64, 57, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 11, 12, 11, 12, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 44, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 37, 38, 37, 38, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 49, 64, 57, 43, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 11, 12, 48, 48, 48, 48, 11, 12, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 51, 50, 64, 56, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 37, 38, 48, 48, 48, 48, 37, 38, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 48, 48, 64, 64, 64, 64, 48, 48, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 44, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 51, 57, 64, 48, 48, 64, 64, 64, 64, 48, 48, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 49, 64, 64, 64, 62, 62, 64, 64, 64, 44, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 64, 64, 64, 64, 64, 64, 64, 64, 50, 57, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 64, 64, 64, 64, 64, 64, 64, 64, 44, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],
        [64, 64, 64, 56, 64, 64, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 57, 56, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 44, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 44, 44, 56, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 57, 64, 64, 64, 64, 64],
        [64, 64, 64, 64, 57, 57, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 64, 50, 64, 64, 64, 64],
        [64, 64, 64, 44, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 44, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 50, 64, 64, 64, 64, 64],
        [64, 64, 64, 57, 56, 49, 64, 64, 64, 64, 64, 64, 64, 64, 64, 49, 57, 50, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 43, 49, 43, 43, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 56, 64, 56, 56, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 49, 64, 64, 44, 64, 64, 64, 64],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 51, 64, 64, 57, 64, 64, 64, 64]
    ];

    const movingFieldArray = [
        [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22],
        [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22],
        [35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35],
        [63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 64, 64, 64, 64, 64, 43, 64, 64, 64, 64, 64, 64, 43, 64, 64, 64, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 44, 50, 64, 64, 64, 56, 64, 64, 64, 64, 64, 64, 56, 43, 64, 44, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 64, 44, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 57, 64, 64, 64, 64, 64, 11, 12, 11, 12, 64, 64, 64, 56, 64, 57, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 43, 57, 64, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 11, 12, 11, 12, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 44, 64, 63],
        [63, 64, 56, 50, 64, 56, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 11, 12, 45, 46, 46, 47, 11, 12, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63, 49, 63, 57, 43, 63],
        [63, 64, 64, 64, 64, 64, 56, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 11, 12, 45, 46, 46, 47, 11, 12, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 51, 50, 64, 56, 63],
        [63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 45, 46, 45, 46, 46, 47, 46, 47, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 45, 46, 46, 46, 46, 46, 46, 47, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 44, 64, 45, 46, 46, 46, 46, 46, 46, 47, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 51, 57, 64, 45, 46, 46, 46, 46, 46, 46, 47, 10, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 49, 58, 59, 59, 59, 59, 59, 59, 60, 10, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63, 63, 63, 63, 64, 64, 64, 64, 64, 63, 57, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 64, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 64, 64, 64, 64, 64, 64, 64, 10, 44, 44, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 63],
        [63, 64, 64, 56, 64, 64, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 47, 47, 56, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 44, 64, 64, 64, 64, 63],
        [63, 64, 64, 64, 44, 44, 56, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 57, 64, 64, 64, 64, 63],
        [63, 64, 64, 64, 57, 57, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 64, 50, 64, 64, 64, 63],
        [63, 64, 64, 44, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 44, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 64, 43, 64, 50, 64, 64, 64, 64, 63],
        [63, 64, 64, 57, 56, 49, 64, 64, 64, 64, 64, 64, 64, 64, 64, 49, 57, 50, 43, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 64, 56, 43, 43, 49, 43, 43, 64, 63],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 56, 56, 64, 56, 56, 64, 63],
        [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 49, 64, 44, 44, 64, 64, 64, 63],
        [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 56, 51, 64, 57, 57, 63, 63, 63, 63]
    ];

    class Field{
        constructor(ctx, rowTileCount, colTileCount, tileSize,imageNumTilesRow, imageNumTilesCol, sprite, ...layers){
            this.ctx = ctx;
            this.rowTileCount = rowTileCount;
            this.colTileCount = colTileCount;
            this.tileSize = tileSize;
            this.imageNumTilesRow = imageNumTilesRow;
            this.imageNumTilesCol = imageNumTilesCol;
            this.sprite = sprite;
            this.layers = layers;
        }


        drawField(){
            for(let r = 0; r < this.rowTileCount; r++){
                for(let c = 0; c < this.colTileCount; c++){
                    let tile;
                    let tileCol;
                    let tileRow;
                    for(let i = 0; i < this.layers.length; i++){
                        tile = this.layers[i][ r ][ c ];
                        tileCol = (tile % this.imageNumTilesCol) | 0;
                        for(let i = 0; i < this.imageNumTilesRow; i++){
                            if(tile >= (i*this.imageNumTilesCol) && tile <= (((i+1)*this.imageNumTilesCol) - 1)){
                                tileRow = i;
                                break;
                            }
                        }

                        this.ctx.drawImage(this.sprite, (tileCol * this.tileSize), (tileRow * this.tileSize), this.tileSize, this.tileSize, (c * this.tileSize), (r * this.tileSize), this.tileSize, this.tileSize);
                    }
                }
            }
        }
    }

    class Hero{
        constructor(stepsArrayMainHero, stepsCount, heroX, heroY, count, stopCount, countX, countY, x, y, flagStepUp, flagStepBottom, flagStepRight, flagStepLeft){
            this.stepsArrayMainHero = stepsArrayMainHero;
            this.stepsCount = stepsCount;
            this.heroX = heroX;
            this.heroY = heroY;
            this.stopCount = stopCount;
            this.countX = countY;
            this.countY = countY;
            this.x = x;
            this.y = y;
            this.flagStepUp = flagStepUp;
            this.flagStepBottom = flagStepBottom;
            this.flagStepRight = flagStepRight;
            this.flagStepLeft = flagStepLeft;
        }

        drawHero(ctx, sprite, stopCoordinateX, stopCoordinateY, spriteSizeX, spriteSizeY, heroSizeX, heroSizeY, animationSpeed){
            if(this.stopCount === this.stepsCount){
                this.count++;
            } else {
                this.stopCount = this.stepsCount;
                this.count = 0;
            }

            if(this.count > animationSpeed){
                ctx.drawImage(sprite, stopCoordinateX, stopCoordinateY, spriteSizeX, spriteSizeY, this.heroX, this.heroY, heroSizeX, heroSizeY);

            } else {
                ctx.drawImage(sprite, this.stepsArrayMainHero[this.stepsCount], this.stepsArrayMainHero[this.stepsCount+1], spriteSizeX, spriteSizeY, this.heroX, this.heroY, heroSizeX, heroSizeY);
                this.stopCount = this.stepsCount;
            }
        }

        findeEnemy(duelPopUp, cssClassHide){
            duelPopUp.classList.remove(cssClassHide);
            let duelTextP = document.querySelector('.duel-text');
            duelTextP.innerHTML = `Ты хочешь сразиться со мной? Я готов! Посмотрим, на что ты способен!`;
            document.querySelector('.canvas').classList.add('filter');
        }

        goAway(duelPopUp, cssClassHide){
            duelPopUp.classList.add(cssClassHide);
            document.querySelector('.canvas').classList.remove('filter');
        }

        heroMoving(e, movingFieldArray){
                if(e.keyCode === 39){
                    this.countX++;
                    if(this.countX === 3){
                        this.x++;
                        this.countX = 0;
                    }
                    if(this.flagStepRight){
                        this.stepsCount = 12;
                        this.flagStepRight = false;
                        this.flagStepBottom = true;
                        this.flagStepUp = true;
                        this.flagStepLeft = true;
                    }
                    if(movingFieldArray[this.y][this.x] !== 64){ // значение 64 - пустая плитка
                        if(typeof movingFieldArray[this.y][this.x] === 'string'){
                            this.findeEnemy(document.querySelector('.duel-popup-overlay'), 'hide');
                        }
                        this.x--;
                        this.countX = 2;
                        return;
                    }
                    this.stepsCount += 4;
                    if(this.stepsCount > 17){
                        this.stepsCount = 12;
                    }
                    this.heroX += 9;
                    this.goAway(document.querySelector('.duel-popup-overlay'), 'hide');
                }

                if(e.keyCode === 37){
                    this.countX--;
                    if(this.countX === -1){
                        this.x--;
                        this.countX = 2;
                    }
                    if(this.flagStepLeft){
                        this.stepsCount = 6;
                        this.flagStepLeft = false;
                        this.flagStepBottom = true;
                        this.flagStepUp = true;
                        this.flagStepRight = true;
                    }
                    if(movingFieldArray[this.y][this.x] !== 64){
                        if(typeof movingFieldArray[this.y][this.x] === 'string'){
                            this.findeEnemy(document.querySelector('.duel-popup-overlay'), 'hide');
                        }
                        this.x++;
                        this.countX = 0;
                        return;
                    }
                    this.stepsCount += 4;
                    if(this.stepsCount > 11){
                        this.stepsCount = 6;
                    }
                    this.heroX -= 9;
                    this.goAway(document.querySelector('.duel-popup-overlay'), 'hide');
                }

                if(e.keyCode === 38){
                    this.countY--;
                    if(this.countY === -1){
                        this.y--;
                        this.countY = 2;
                    }
                    if(this.flagStepUp){
                        this.stepsCount = 18;
                        this.flagStepUp = false;
                        this.flagStepBottom = true;
                        this.flagStepRight = true;
                        this.flagStepLeft = true;
                    }
                    if(movingFieldArray[this.y][this.x] !== 64){
                        if(typeof movingFieldArray[this.y][this.x] === 'string'){
                            this.findeEnemy(document.querySelector('.duel-popup-overlay'), 'hide');
                        }
                        this.y++;
                        this.countY = 0;
                        return;
                    }
                    this.stepsCount += 4;
                    if(this.stepsCount > 23){
                        this.stepsCount = 18;
                    }
                    this.heroY -= 9;
                    this.goAway(document.querySelector('.duel-popup-overlay'), 'hide');
                }

                if(e.keyCode === 40){
                    this.countY++;
                    if(this.countY === 3){
                        this.y++;
                        this.countY = 0;
                    }
                    if(this.flagStepBottom){
                        this.stepsCount = 0;
                        this.flagStepBottom = false;
                        this.flagStepUp = true;
                        this.flagStepRight = true;
                        this.flagStepLeft = true;
                    }
                    if(movingFieldArray[this.y][this.x] !== 64){
                        if(typeof movingFieldArray[this.y][this.x] === 'string'){
                            this.findeEnemy(document.querySelector('.duel-popup-overlay'), 'hide');
                        }
                        this.y--;
                        this.countY = 2;
                        return;
                    }
                    this.stepsCount += 4;
                    if(this.stepsCount >  5){
                        this.stepsCount = 0;
                    }
                    this.heroY += 9;
                    this.goAway(document.querySelector('.duel-popup-overlay'), 'hide');
                }
        }
    }

    class Enemy{
        constructor(stepsArrayEnemy, stepsEnemy, enemyX, enemyY, enemyCount, direction, stepLength, enemyIndex){
            this.stepsArrayEnemy = stepsArrayEnemy;
            this.stepsEnemy = stepsEnemy;
            this.enemyX = enemyX;
            this.enemyY = enemyY;
            this.enemyCount = enemyCount;
            this.direction = direction;
            this.stepLength = stepLength;
            if(typeof enemyIndex === 'number'){
                this.enemyIndex = String(enemyIndex);
            }
            if (typeof enemyIndex === 'string'){
                this.enemyIndex = enemyIndex;
            }

        }

        chooseDirection(){
            if(this.direction === 'x'){
                if(this.stepsEnemy > (this.stepsArrayEnemy.length/2) - 1){
                    this.enemyX += this.stepLength;
                } else {
                    this.enemyX -= this.stepLength;
                }
            } else if(this.direction === 'y'){
                if(this.stepsEnemy > (this.stepsArrayEnemy.length/2) - 1){
                    this.enemyY += this.stepLength;
                } else {
                    this.enemyY -= this.stepLength;
                }
            }
        }

        drawEnemy(ctx, sprite, spriteSizeX, spriteSizeY, enemySizeX, enemySizeY){
            ctx.drawImage(sprite, this.stepsArrayEnemy[this.stepsEnemy], this.stepsArrayEnemy[this.stepsEnemy + 1], spriteSizeX, spriteSizeY, this.enemyX, this.enemyY, enemySizeX, enemySizeY);
        }

        drawEnemyMoving(ctx, sprite, spriteX, spriteY, enemySizeX, enemySizeY, animationSpeed){

            this.drawEnemy(ctx, sprite, spriteX, spriteY, enemySizeX, enemySizeY);

            if(this.enemyCount === animationSpeed){

                this.enemyCount = 0;
                this.chooseDirection();
                this.stepsEnemy += 2;

                if(this.stepsEnemy > this.stepsArrayEnemy.length - 1){
                    this.stepsEnemy = 0;
                }

                let x = Math.round(this.enemyX/27);
                let y = Math.round(this.enemyY/27);

                movingFieldArray[y][x] = this.enemyIndex;
            }

            this.enemyCount++;
        }
    }

    const canvas = document.querySelector('.canvas');
    const ctx = canvas.getContext("2d");
    const tilesetImage = new Image();
    const mainHero = new Image();


    const allEnemies = [
        new Enemy([144,48,240,48,144,48,240,48,144,48,240,48,144,48,240,48,144,96,240,96,144,96,240,96,144,96,240,96,144,96,240,96],0,1269,108,0,'x',3, 0),
        new Enemy([288,144,384,144,288,144,384,144,288,144,384,144,288,144,384,144,288,0,384,0,288,0,384,0,288,0,384,0,288,0,384,0],0,1242,486,0,'y',3, 1),
        new Enemy([432,48,528,48,432,48,528,48,432,48,528,48,432,48,528,48,432,96,528,96,432,96,528,96,432,96,528,96,432,96,528,96],0,540,594,0,'x',3, 2),
        new Enemy([0,336,96,336,0,336,96,336,0,336,96,336,0,336,96,336,0,192,96,192,0,192,96,192,0,192,96,192,0,192,96,192],0,27,486,0,'y',3, 3),
        new Enemy([144,240,240,240,144,240,240,240,144,240,240,240,144,240,240,240,144,288,240,288,144,288,240,288,144,288,240,288,144,288,240,288],0,189,108,0,'x',3, 4),
        ];

    canvas.width = 1366;
    canvas.height = 650;

    tilesetImage.src = 'assets/images/canvas/finalLand2_0.png';
    mainHero.src = 'assets/images/canvas/pokemonPersons.png';


    let field = new Field(ctx,24,50,27,5,13,tilesetImage,ground,layer1,layer2);
    let hero = new Hero([0,0,48,0,96,0,0,48,48,48,96,48,0,96,48,96,96,96,0,144,48,144,96,144], 2, 756, 405, 0, 0, 1, 1, 28, 15, true, true, true, true, movingFieldArray);
    // stepsArrayMainHero - это массив, в котором указаны координаты для каждого движения персонажа,
    // в нашем случае одна плитка из спрайта занимает 48х48 пикселей
    // первые 6 элементов массива отвечают за движение вниз, следющие - влево, следующие - вправо, и последние вверх

    tilesetImage.onload = render;

    function render(){
        field.drawField();

        hero.drawHero(ctx, mainHero, 48, 0, 48, 48, 40, 40, 30);

        allEnemies[0].drawEnemyMoving(ctx, mainHero, 48, 48, 40, 40, 10);
        allEnemies[1].drawEnemyMoving(ctx, mainHero, 48, 48, 40, 40, 12);
        allEnemies[2].drawEnemyMoving(ctx, mainHero, 48, 48, 40, 40, 8);
        allEnemies[3].drawEnemyMoving(ctx, mainHero, 48, 48, 40, 40, 11);
        allEnemies[4].drawEnemyMoving(ctx, mainHero, 48, 48, 40, 40, 9);

        requestAnimationFrame(render);
    }

    document.addEventListener('keydown', function (e) {
        hero.heroMoving(e, movingFieldArray);
    });
}

































